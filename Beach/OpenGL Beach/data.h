//----------------------------------------------------------------------------------------
/**
 * \file    data.h
 * \author  Jordan Jiri, Jaroslav Sloup, Tomas Barak, Petr Felkel
 * \date    2021
 * \brief   Basic defines and data structures.
 */
//----------------------------------------------------------------------------------------

#ifndef __DATA_H
#define __DATA_H

#define WINDOW_WIDTH   1024
#define WINDOW_HEIGHT  768
#define WINDOW_TITLE   "Beach Scene"

// keys used in the key map
enum { KEY_SHIFT, KEY_LEFT_ARROW, KEY_RIGHT_ARROW, KEY_UP_ARROW, KEY_DOWN_ARROW, KEY_SPACE, KEYS_COUNT };

// default shaders - color per vertex and matrix multiplication
const std::string colorVertexShaderSrc(
    "#version 140\n"
    "uniform mat4 PVMmatrix;\n"
    "in vec3 position;\n"
    "in vec3 color;\n"
    "smooth out vec4 theColor;\n"
    "void main() {\n"
	"  gl_Position = PVMmatrix * vec4(position, 1.0);\n"
	"  theColor = vec4(color, 1.0);\n"
    "}\n"
);

const std::string colorFragmentShaderSrc(
    "#version 140\n"
    "smooth in vec4 theColor;\n"
    "out vec4 outputColor;\n"
    "void main() {\n"
    "  outputColor = theColor;\n"
    "}\n"
);


//
// missile geometry definition 
//

const int missileTrianglesCount = 4;
// temp constants used for missileVertices array contents definition
const float invSqrt2 = (float)(1.0 / sqrt(2.0));

// missile is represented as a tetrahedron (polyhedron with 4 faces and 4 vertices)
const float missileVertices[] = {
  // non-interleaved array
  // vertices of tetrahedron, each face is an equilateral triangle, edge length 2.0

  // vertices
  //  1.0f,  0.0f, -invSqrt2,   -> vertex 0
  //  0.0f,  1.0f,  invSqrt2,   -> vertex 1
  // -1.0f,  0.0f, -invSqrt2,   -> vertex 2
  //  0.0f, -1.0f,  invSqrt2    -> vertex 3

  // three vertices per each triangle
   0.0f, -1.0f,  invSqrt2, // 3
   1.0f,  0.0f, -invSqrt2, // 0
   0.0f,  1.0f,  invSqrt2, // 1

  -1.0f,  0.0f, -invSqrt2, // 2
   0.0f, -1.0f,  invSqrt2, // 3
   0.0f,  1.0f,  invSqrt2, // 1

   1.0f,  0.0f, -invSqrt2, // 0
  -1.0f,  0.0f, -invSqrt2, // 2
   0.0f,  1.0f,  invSqrt2, // 1

  -1.0f,  0.0f, -invSqrt2, // 2
   1.0f,  0.0f, -invSqrt2, // 0
   0.0f, -1.0f,  invSqrt2, // 3

  // colors for vertices
  1.0f, 0.0f, 1.0f, // 3
  1.0f, 0.0f, 1.0f, // 0
  0.0f, 1.0f, 0.0f, // 1

  0.0f, 0.0f, 1.0f, // 2
  1.0f, 0.0f, 1.0f, // 3
  0.0f, 1.0f, 0.0f, // 1

  1.0f, 0.0f, 1.0f, // 0
  0.0f, 0.0f, 1.0f, // 2
  0.0f, 1.0f, 0.0f, // 1

  0.0f, 0.0f, 1.0f, // 2
  1.0f, 0.0f, 1.0f, // 0
  1.0f, 0.0f, 1.0f, // 3

  // normals
   1.0f, 0.0f, invSqrt2,
   1.0f, 0.0f, invSqrt2,
   1.0f, 0.0f, invSqrt2,

  -1.0f, 0.0f, invSqrt2,
  -1.0f, 0.0f, invSqrt2,
  -1.0f, 0.0f, invSqrt2,

   0.0f, 1.0f, -invSqrt2,
   0.0f, 1.0f, -invSqrt2,
   0.0f, 1.0f, -invSqrt2,

   0.0f, -1.0f, -invSqrt2,
   0.0f, -1.0f, -invSqrt2,
   0.0f, -1.0f, -invSqrt2,
};

const int flameNumQuadVertices = 4;
const float flameVertexData[flameNumQuadVertices * 5] = {

    // x      y     z     u     v
    -1.0f, -1.0f, 0.0f, 0.0f, 0.0f,
    1.0f, -1.0f, 0.0f, 1.0f, 0.0f,
    -1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
    1.0f, 1.0f, 0.0f, 1.0f, 1.0f,
};

const int explosionNumQuadVertices = 4;
const float explosionVertexData[explosionNumQuadVertices * 5] = {

    // x      y     z     u     v
    -1.0f, -1.0f, 0.0f, 0.0f, 0.0f,
    1.0f, -1.0f, 0.0f, 1.0f, 0.0f,
    -1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
    1.0f, 1.0f, 0.0f, 1.0f, 1.0f,
};

const int bannerNumQuadVertices = 4;
const float bannerVertexData[bannerNumQuadVertices * 5] = {

    // x      y      z     u     v
    -1.0f,  0.15f, 0.0f, 0.0f, 1.0f,
    -1.0f, -0.15f, 0.0f, 0.0f, 0.0f,
     1.0f,  0.15f, 0.0f, 3.0f, 1.0f,
     1.0f, -0.15f, 0.0f, 3.0f, 0.0f
};

//
// ufo geometry definition 
//

const int ufoTrianglesCount = 6;
// temp constants used for ufoVertices array contents definition
const float ufoH = 0.25f;
const float cos30d = (float)cos(M_PI/6.0);
const float sin30d = (float)sin(M_PI/6.0);

const float ufoVertices[] = {
  // ufo is formed by two parts (top and bottom) joined together
  // each part is drawn as six separate triangles connected together

  // drawArrays() part of data (top part), interleaved array
  // vertices 0..5 are on the border, vertex 6 is in the center
  // colors of the triangles alternate between yellow (1,1,0) and magenta (1,0,1)

  // interleaved array: position/color/normal
  //  x      y        z     r     g     b             nx     ny         nz
  // triangle 5 0 6 -> yellow color
   cos30d, 0.0f, -sin30d,  1.0f, 1.0f, 0.0f,          ufoH, 1.0f,         0.0f, // 5
     0.0f, ufoH,    0.0f,  1.0f, 1.0f, 0.0f,          ufoH, 1.0f,         0.0f, // 6
   cos30d, 0.0f,  sin30d,  1.0f, 1.0f, 0.0f,          ufoH, 1.0f,         0.0f, // 0
  // triangle 1 2 6 -> yellow color
     0.0f, 0.0f,    1.0f,  1.0f, 1.0f, 0.0f,  -ufoH*sin30d, 1.0f,  ufoH*cos30d, // 1
     0.0f, ufoH,    0.0f,  1.0f, 1.0f, 0.0f,  -ufoH*sin30d, 1.0f,  ufoH*cos30d, // 6
  -cos30d, 0.0f,  sin30d,  1.0f, 1.0f, 0.0f,  -ufoH*sin30d, 1.0f,  ufoH*cos30d, // 2
  // triangle 3 4 6 -> yellow color
  -cos30d, 0.0f, -sin30d,  1.0f, 1.0f, 0.0f,  -ufoH*sin30d, 1.0f, -ufoH*cos30d, // 3
     0.0f, ufoH,    0.0f,  1.0f, 1.0f, 0.0f,  -ufoH*sin30d, 1.0f, -ufoH*cos30d, // 6
     0.0f, 0.0f,   -1.0f,  1.0f, 1.0f, 0.0f,  -ufoH*sin30d, 1.0f, -ufoH*cos30d, // 4

  // triangle 0 1 6 -> magenta color
   cos30d, 0.0f,  sin30d,  1.0f, 0.0f, 1.0f,   ufoH*sin30d, 1.0f,  ufoH*cos30d, // 0
     0.0f, ufoH,    0.0f,  1.0f, 0.0f, 1.0f,   ufoH*sin30d, 1.0f,  ufoH*cos30d, // 6
     0.0f, 0.0f,    1.0f,  1.0f, 0.0f, 1.0f,   ufoH*sin30d, 1.0f,  ufoH*cos30d, // 1
  // triangle 2 3 6 -> magenta color
  -cos30d, 0.0f,  sin30d,  1.0f, 0.0f, 1.0f,         -ufoH, 1.0f,         0.0f, // 2
     0.0f, ufoH,    0.0f,  1.0f, 0.0f, 1.0f,         -ufoH, 1.0f,         0.0f, // 6
  -cos30d, 0.0f, -sin30d,  1.0f, 0.0f, 1.0f,         -ufoH, 1.0f,         0.0f, // 3
  // triangle 4 5 6 -> magenta color
     0.0f, 0.0f,   -1.0f,  1.0f, 0.0f, 1.0f,   ufoH*sin30d, 1.0f, -ufoH*cos30d, // 4
     0.0f, ufoH,    0.0f,  1.0f, 0.0f, 1.0f,   ufoH*sin30d, 1.0f, -ufoH*cos30d, // 6
   cos30d, 0.0f, -sin30d,  1.0f, 0.0f, 1.0f,   ufoH*sin30d, 1.0f, -ufoH*cos30d, // 5



  // draw elements data part (bottom part), interleaved array
  // vertices 0..5 are on the border, vertex 6 is in the center
  // vertices on the border have the same color while vertex in the middle differs

  //  x      y        z      r     g     b        nx      ny      nz
   cos30d,  0.0f,  sin30d,  1.0f, 0.0f, 1.0f,   ufoH*cos30d, -1.0f,  ufoH*sin30d, // 0
     0.0f,  0.0f,    1.0f,  1.0f, 0.0f, 1.0f,          0.0f, -1.0f,         1.0f, // 1
  -cos30d,  0.0f,  sin30d,  1.0f, 0.0f, 1.0f,  -ufoH*cos30d, -1.0f,  ufoH*sin30d, // 2
  -cos30d,  0.0f, -sin30d,  1.0f, 0.0f, 1.0f,  -ufoH*cos30d, -1.0f, -ufoH*sin30d, // 3
     0.0f,  0.0f,   -1.0f,  1.0f, 0.0f, 1.0f,          0.0f, -1.0f,        -1.0f, // 4
   cos30d,  0.0f, -sin30d,  1.0f, 0.0f, 1.0f,   ufoH*cos30d, -1.0f, -ufoH*sin30d, // 5
     0.0f, -ufoH,    0.0f,  0.3f, 0.3f, 0.3f,          0.0f, -1.0f,         0.0f, // 6
        cos30d,  0.0f,  sin30d,  1.0f, 0.0f, 1.0f,   ufoH* cos30d, -1.0f,  ufoH* sin30d, // 0
     0.0f,  0.0f,    1.0f,  1.0f, 0.0f, 1.0f,          0.0f, -1.0f,         1.0f, // 1
  -cos30d,  0.0f,  sin30d,  1.0f, 0.0f, 1.0f,  -ufoH * cos30d, -1.0f,  ufoH* sin30d, // 2
  -cos30d,  0.0f, -sin30d,  1.0f, 0.0f, 1.0f,  -ufoH * cos30d, -1.0f, -ufoH * sin30d, // 3
     0.0f,  0.0f,   -1.0f,  1.0f, 0.0f, 1.0f,          0.0f, -1.0f,        -1.0f, // 4
   cos30d,  0.0f, -sin30d,  1.0f, 0.0f, 1.0f,   ufoH* cos30d, -1.0f, -ufoH * sin30d, // 5
     0.0f, -ufoH,    0.0f,  0.3f, 0.3f, 0.3f,          0.0f, -1.0f,         0.0f, // 6
        cos30d,  0.0f,  sin30d,  1.0f, 0.0f, 1.0f,   ufoH* cos30d, -1.0f,  ufoH* sin30d, // 0
     0.0f,  0.0f,    1.0f,  1.0f, 0.0f, 1.0f,          0.0f, -1.0f,         1.0f, // 1
  -cos30d,  0.0f,  sin30d,  1.0f, 0.0f, 1.0f,  -ufoH * cos30d, -1.0f,  ufoH* sin30d, // 2
  -cos30d,  0.0f, -sin30d,  1.0f, 0.0f, 1.0f,  -ufoH * cos30d, -1.0f, -ufoH * sin30d, // 3
     0.0f,  0.0f,   -1.0f,  1.0f, 0.0f, 1.0f,          0.0f, -1.0f,        -1.0f, // 4
   cos30d,  0.0f, -sin30d,  1.0f, 0.0f, 1.0f,   ufoH* cos30d, -1.0f, -ufoH * sin30d, // 5
     0.0f, -ufoH,    0.0f,  0.3f, 0.3f, 0.3f,          0.0f, -1.0f,         0.0f, // 6
        cos30d,  0.0f,  sin30d,  1.0f, 0.0f, 1.0f,   ufoH* cos30d, -1.0f,  ufoH* sin30d, // 0
     0.0f,  0.0f,    1.0f,  1.0f, 0.0f, 1.0f,          0.0f, -1.0f,         1.0f, // 1
  -cos30d,  0.0f,  sin30d,  1.0f, 0.0f, 1.0f,  -ufoH * cos30d, -1.0f,  ufoH* sin30d, // 2
  -cos30d,  0.0f, -sin30d,  1.0f, 0.0f, 1.0f,  -ufoH * cos30d, -1.0f, -ufoH * sin30d, // 3
     0.0f,  0.0f,   -1.0f,  1.0f, 0.0f, 1.0f,          0.0f, -1.0f,        -1.0f, // 4
   cos30d,  0.0f, -sin30d,  1.0f, 0.0f, 1.0f,   ufoH* cos30d, -1.0f, -ufoH * sin30d, // 5
     0.0f, -ufoH,    0.0f,  0.3f, 0.3f, 0.3f,          0.0f, -1.0f,         0.0f, // 6
        cos30d,  0.0f,  sin30d,  1.0f, 0.0f, 1.0f,   ufoH* cos30d, -1.0f,  ufoH* sin30d, // 0
     0.0f,  0.0f,    1.0f,  1.0f, 0.0f, 1.0f,          0.0f, -1.0f,         1.0f, // 1
  -cos30d,  0.0f,  sin30d,  1.0f, 0.0f, 1.0f,  -ufoH * cos30d, -1.0f,  ufoH* sin30d, // 2
  -cos30d,  0.0f, -sin30d,  1.0f, 0.0f, 1.0f,  -ufoH * cos30d, -1.0f, -ufoH * sin30d, // 3
     0.0f,  0.0f,   -1.0f,  1.0f, 0.0f, 1.0f,          0.0f, -1.0f,        -1.0f, // 4
   cos30d,  0.0f, -sin30d,  1.0f, 0.0f, 1.0f,   ufoH* cos30d, -1.0f, -ufoH * sin30d, // 5
     0.0f, -ufoH,    0.0f,  0.3f, 0.3f, 0.3f,          0.0f, -1.0f,         0.0f, // 6

};

// indices of the 6 faces used to draw the bottom part of the ufo
const unsigned int ufoIndices[] = {

  // indices are shifted by 18 (18 vertices are stored before the second part vertices)
  18+5, 18+0, 18+6,
  18+0, 18+1, 18+6,
  18+1, 18+2, 18+6,
  18+2, 18+3, 18+6,
  18+3, 18+4, 18+6,
  18+4, 18+5, 18+6

};

const int coneNAttribsPerVertex = 8;
const int coneNVertices = 128;
const int coneNTriangles = 62;
const float coneVertices[] = {
  0.0f,1.0f,-1.0f,0.087754f,0.890977f,0.445488f,0.25f,0.49f,
  0.0f,0.0f,1.0f,0.087754f,0.890977f,0.445488f,0.25f,0.25f,
  0.19509f,0.980785f,-1.0f,0.087754f,0.890977f,0.445488f,0.296822f,0.485388f,
  0.19509f,0.980785f,-1.0f,0.259888f,0.856737f,0.445488f,0.296822f,0.485388f,
  0.0f,0.0f,1.0f,0.259888f,0.856737f,0.445488f,0.25f,0.25f,
  0.382683f,0.92388f,-1.0f,0.259888f,0.856737f,0.445488f,0.341844f,0.471731f,
  0.382683f,0.92388f,-1.0f,0.422036f,0.789573f,0.445488f,0.341844f,0.471731f,
  0.0f,0.0f,1.0f,0.422036f,0.789573f,0.445488f,0.25f,0.25f,
  0.55557f,0.83147f,-1.0f,0.422036f,0.789573f,0.445488f,0.383337f,0.449553f,
  0.55557f,0.83147f,-1.0f,0.567965f,0.692067f,0.445488f,0.383337f,0.449553f,
  0.0f,0.0f,1.0f,0.567965f,0.692067f,0.445488f,0.25f,0.25f,
  0.707107f,0.707107f,-1.0f,0.567965f,0.692067f,0.445488f,0.419706f,0.419706f,
  0.707107f,0.707107f,-1.0f,0.692067f,0.567965f,0.445488f,0.419706f,0.419706f,
  0.0f,0.0f,1.0f,0.692067f,0.567965f,0.445488f,0.25f,0.25f,
  0.83147f,0.55557f,-1.0f,0.692067f,0.567965f,0.445488f,0.449553f,0.383337f,
  0.83147f,0.55557f,-1.0f,0.789573f,0.422036f,0.445488f,0.449553f,0.383337f,
  0.0f,0.0f,1.0f,0.789573f,0.422036f,0.445488f,0.25f,0.25f,
  0.92388f,0.382683f,-1.0f,0.789573f,0.422036f,0.445488f,0.471731f,0.341844f,
  0.92388f,0.382683f,-1.0f,0.856737f,0.259888f,0.445488f,0.471731f,0.341844f,
  0.0f,0.0f,1.0f,0.856737f,0.259888f,0.445488f,0.25f,0.25f,
  0.980785f,0.19509f,-1.0f,0.856737f,0.259888f,0.445488f,0.485388f,0.296822f,
  0.980785f,0.19509f,-1.0f,0.890977f,0.087754f,0.445488f,0.485388f,0.296822f,
  0.0f,0.0f,1.0f,0.890977f,0.087754f,0.445488f,0.25f,0.25f,
  1.0f,7.54979e-08f,-1.0f,0.890977f,0.087754f,0.445488f,0.49f,0.25f,
  1.0f,7.54979e-08f,-1.0f,0.890977f,-0.087753f,0.445488f,0.49f,0.25f,
  0.0f,0.0f,1.0f,0.890977f,-0.087753f,0.445488f,0.25f,0.25f,
  0.980785f,-0.19509f,-1.0f,0.890977f,-0.087753f,0.445488f,0.485388f,0.203178f,
  0.980785f,-0.19509f,-1.0f,0.856737f,-0.259888f,0.445488f,0.485388f,0.203178f,
  0.0f,0.0f,1.0f,0.856737f,-0.259888f,0.445488f,0.25f,0.25f,
  0.92388f,-0.382683f,-1.0f,0.856737f,-0.259888f,0.445488f,0.471731f,0.158156f,
  0.92388f,-0.382683f,-1.0f,0.789573f,-0.422035f,0.445488f,0.471731f,0.158156f,
  0.0f,0.0f,1.0f,0.789573f,-0.422035f,0.445488f,0.25f,0.25f,
  0.83147f,-0.55557f,-1.0f,0.789573f,-0.422035f,0.445488f,0.449553f,0.116663f,
  0.83147f,-0.55557f,-1.0f,0.692067f,-0.567965f,0.445488f,0.449553f,0.116663f,
  0.0f,0.0f,1.0f,0.692067f,-0.567965f,0.445488f,0.25f,0.25f,
  0.707107f,-0.707107f,-1.0f,0.692067f,-0.567965f,0.445488f,0.419706f,0.080294f,
  0.707107f,-0.707107f,-1.0f,0.567965f,-0.692067f,0.445488f,0.419706f,0.080294f,
  0.0f,0.0f,1.0f,0.567965f,-0.692067f,0.445488f,0.25f,0.25f,
  0.55557f,-0.83147f,-1.0f,0.567965f,-0.692067f,0.445488f,0.383337f,0.050447f,
  0.55557f,-0.83147f,-1.0f,0.422036f,-0.789573f,0.445488f,0.383337f,0.050447f,
  0.0f,0.0f,1.0f,0.422036f,-0.789573f,0.445488f,0.25f,0.25f,
  0.382683f,-0.92388f,-1.0f,0.422036f,-0.789573f,0.445488f,0.341844f,0.028269f,
  0.382683f,-0.92388f,-1.0f,0.259888f,-0.856737f,0.445488f,0.341844f,0.028269f,
  0.0f,0.0f,1.0f,0.259888f,-0.856737f,0.445488f,0.25f,0.25f,
  0.19509f,-0.980785f,-1.0f,0.259888f,-0.856737f,0.445488f,0.296822f,0.014612f,
  0.19509f,-0.980785f,-1.0f,0.087753f,-0.890977f,0.445488f,0.296822f,0.014612f,
  0.0f,0.0f,1.0f,0.087753f,-0.890977f,0.445488f,0.25f,0.25f,
  -3.25841e-07f,-1.0f,-1.0f,0.087753f,-0.890977f,0.445488f,0.25f,0.01f,
  -3.25841e-07f,-1.0f,-1.0f,-0.087754f,-0.890977f,0.445488f,0.25f,0.01f,
  0.0f,0.0f,1.0f,-0.087754f,-0.890977f,0.445488f,0.25f,0.25f,
  -0.195091f,-0.980785f,-1.0f,-0.087754f,-0.890977f,0.445488f,0.203178f,0.014612f,
  -0.195091f,-0.980785f,-1.0f,-0.259889f,-0.856737f,0.445488f,0.203178f,0.014612f,
  0.0f,0.0f,1.0f,-0.259889f,-0.856737f,0.445488f,0.25f,0.25f,
  -0.382684f,-0.923879f,-1.0f,-0.259889f,-0.856737f,0.445488f,0.158156f,0.028269f,
  -0.382684f,-0.923879f,-1.0f,-0.422036f,-0.789573f,0.445488f,0.158156f,0.028269f,
  0.0f,0.0f,1.0f,-0.422036f,-0.789573f,0.445488f,0.25f,0.25f,
  -0.555571f,-0.831469f,-1.0f,-0.422036f,-0.789573f,0.445488f,0.116663f,0.050447f,
  -0.555571f,-0.831469f,-1.0f,-0.567965f,-0.692066f,0.445488f,0.116663f,0.050447f,
  0.0f,0.0f,1.0f,-0.567965f,-0.692066f,0.445488f,0.25f,0.25f,
  -0.707107f,-0.707106f,-1.0f,-0.567965f,-0.692066f,0.445488f,0.080294f,0.080294f,
  -0.707107f,-0.707106f,-1.0f,-0.692067f,-0.567964f,0.445488f,0.080294f,0.080294f,
  0.0f,0.0f,1.0f,-0.692067f,-0.567964f,0.445488f,0.25f,0.25f,
  -0.83147f,-0.55557f,-1.0f,-0.692067f,-0.567964f,0.445488f,0.050447f,0.116663f,
  -0.83147f,-0.55557f,-1.0f,-0.789574f,-0.422035f,0.445488f,0.050447f,0.116663f,
  0.0f,0.0f,1.0f,-0.789574f,-0.422035f,0.445488f,0.25f,0.25f,
  -0.92388f,-0.382683f,-1.0f,-0.789574f,-0.422035f,0.445488f,0.028269f,0.158156f,
  -0.92388f,-0.382683f,-1.0f,-0.856737f,-0.259887f,0.445488f,0.028269f,0.158156f,
  0.0f,0.0f,1.0f,-0.856737f,-0.259887f,0.445488f,0.25f,0.25f,
  -0.980785f,-0.195089f,-1.0f,-0.856737f,-0.259887f,0.445488f,0.014611f,0.203179f,
  -0.980785f,-0.195089f,-1.0f,-0.890977f,-0.087753f,0.445488f,0.014611f,0.203179f,
  0.0f,0.0f,1.0f,-0.890977f,-0.087753f,0.445488f,0.25f,0.25f,
  -1.0f,9.65599e-07f,-1.0f,-0.890977f,-0.087753f,0.445488f,0.01f,0.25f,
  -1.0f,9.65599e-07f,-1.0f,-0.890977f,0.087754f,0.445488f,0.01f,0.25f,
  0.0f,0.0f,1.0f,-0.890977f,0.087754f,0.445488f,0.25f,0.25f,
  -0.980785f,0.195091f,-1.0f,-0.890977f,0.087754f,0.445488f,0.014612f,0.296822f,
  -0.980785f,0.195091f,-1.0f,-0.856737f,0.259889f,0.445488f,0.014612f,0.296822f,
  0.0f,0.0f,1.0f,-0.856737f,0.259889f,0.445488f,0.25f,0.25f,
  -0.923879f,0.382684f,-1.0f,-0.856737f,0.259889f,0.445488f,0.028269f,0.341844f,
  -0.923879f,0.382684f,-1.0f,-0.789573f,0.422037f,0.445488f,0.028269f,0.341844f,
  0.0f,0.0f,1.0f,-0.789573f,0.422037f,0.445488f,0.25f,0.25f,
  -0.831469f,0.555571f,-1.0f,-0.789573f,0.422037f,0.445488f,0.050447f,0.383337f,
  -0.831469f,0.555571f,-1.0f,-0.692066f,0.567965f,0.445488f,0.050447f,0.383337f,
  0.0f,0.0f,1.0f,-0.692066f,0.567965f,0.445488f,0.25f,0.25f,
  -0.707106f,0.707108f,-1.0f,-0.692066f,0.567965f,0.445488f,0.080295f,0.419706f,
  -0.707106f,0.707108f,-1.0f,-0.567964f,0.692067f,0.445488f,0.080295f,0.419706f,
  0.0f,0.0f,1.0f,-0.567964f,0.692067f,0.445488f,0.25f,0.25f,
  -0.555569f,0.83147f,-1.0f,-0.567964f,0.692067f,0.445488f,0.116663f,0.449553f,
  -0.555569f,0.83147f,-1.0f,-0.422035f,0.789574f,0.445488f,0.116663f,0.449553f,
  0.0f,0.0f,1.0f,-0.422035f,0.789574f,0.445488f,0.25f,0.25f,
  -0.382682f,0.92388f,-1.0f,-0.422035f,0.789574f,0.445488f,0.158156f,0.471731f,
  -0.195089f,0.980786f,-1.0f,-0.0f,0.0f,-1.0f,0.703179f,0.485389f,
  0.0f,1.0f,-1.0f,-0.0f,0.0f,-1.0f,0.75f,0.49f,
  0.19509f,0.980785f,-1.0f,-0.0f,0.0f,-1.0f,0.796822f,0.485388f,
  0.382683f,0.92388f,-1.0f,0.0f,0.0f,-1.0f,0.841844f,0.471731f,
  0.55557f,0.83147f,-1.0f,0.0f,0.0f,-1.0f,0.883337f,0.449553f,
  0.707107f,0.707107f,-1.0f,0.0f,0.0f,-1.0f,0.919706f,0.419706f,
  0.83147f,0.55557f,-1.0f,0.0f,0.0f,-1.0f,0.949553f,0.383337f,
  0.92388f,0.382683f,-1.0f,0.0f,0.0f,-1.0f,0.971731f,0.341844f,
  0.980785f,0.19509f,-1.0f,0.0f,0.0f,-1.0f,0.985388f,0.296822f,
  1.0f,7.54979e-08f,-1.0f,0.0f,0.0f,-1.0f,0.99f,0.25f,
  0.980785f,-0.19509f,-1.0f,0.0f,0.0f,-1.0f,0.985388f,0.203178f,
  0.92388f,-0.382683f,-1.0f,0.0f,0.0f,-1.0f,0.971731f,0.158156f,
  0.83147f,-0.55557f,-1.0f,0.0f,0.0f,-1.0f,0.949553f,0.116663f,
  0.707107f,-0.707107f,-1.0f,0.0f,0.0f,-1.0f,0.919706f,0.080294f,
  0.55557f,-0.83147f,-1.0f,0.0f,0.0f,-1.0f,0.883337f,0.050447f,
  0.382683f,-0.92388f,-1.0f,0.0f,0.0f,-1.0f,0.841844f,0.028269f,
  0.19509f,-0.980785f,-1.0f,0.0f,0.0f,-1.0f,0.796822f,0.014612f,
  -3.25841e-07f,-1.0f,-1.0f,0.0f,0.0f,-1.0f,0.75f,0.01f,
  -0.195091f,-0.980785f,-1.0f,0.0f,0.0f,-1.0f,0.703178f,0.014612f,
  -0.382684f,-0.923879f,-1.0f,0.0f,0.0f,-1.0f,0.658156f,0.028269f,
  -0.555571f,-0.831469f,-1.0f,0.0f,0.0f,-1.0f,0.616663f,0.050447f,
  -0.707107f,-0.707106f,-1.0f,0.0f,0.0f,-1.0f,0.580294f,0.080294f,
  -0.83147f,-0.55557f,-1.0f,0.0f,0.0f,-1.0f,0.550447f,0.116663f,
  -0.92388f,-0.382683f,-1.0f,0.0f,0.0f,-1.0f,0.528269f,0.158156f,
  -0.980785f,-0.195089f,-1.0f,0.0f,0.0f,-1.0f,0.514611f,0.203179f,
  -1.0f,9.65599e-07f,-1.0f,0.0f,-0.0f,-1.0f,0.51f,0.25f,
  -0.980785f,0.195091f,-1.0f,0.0f,-0.0f,-1.0f,0.514612f,0.296822f,
  -0.923879f,0.382684f,-1.0f,0.0f,0.0f,-1.0f,0.528269f,0.341844f,
  -0.831469f,0.555571f,-1.0f,0.0f,0.0f,-1.0f,0.550447f,0.383337f,
  -0.707106f,0.707108f,-1.0f,0.0f,0.0f,-1.0f,0.580295f,0.419706f,
  -0.555569f,0.83147f,-1.0f,0.0f,0.0f,-1.0f,0.616663f,0.449553f,
  -0.382682f,0.92388f,-1.0f,0.0f,0.0f,-1.0f,0.658156f,0.471731f,
  -0.382682f,0.92388f,-1.0f,-0.259887f,0.856737f,0.445488f,0.158156f,0.471731f,
  0.0f,0.0f,1.0f,-0.259887f,0.856737f,0.445488f,0.25f,0.25f,
  -0.195089f,0.980786f,-1.0f,-0.259887f,0.856737f,0.445488f,0.203179f,0.485389f,
  -0.195089f,0.980786f,-1.0f,-0.087753f,0.890977f,0.445488f,0.203179f,0.485389f,
  0.0f,0.0f,1.0f,-0.087753f,0.890977f,0.445488f,0.25f,0.25f,
  0.0f,1.0f,-1.0f,-0.087753f,0.890977f,0.445488f,0.25f,0.49f,
}; // end coneVertices

const unsigned coneTriangles[] = {
  0, 1, 2,
  3, 4, 5,
  6, 7, 8,
  9, 10, 11,
  12, 13, 14,
  15, 16, 17,
  18, 19, 20,
  21, 22, 23,
  24, 25, 26,
  27, 28, 29,
  30, 31, 32,
  33, 34, 35,
  36, 37, 38,
  39, 40, 41,
  42, 43, 44,
  45, 46, 47,
  48, 49, 50,
  51, 52, 53,
  54, 55, 56,
  57, 58, 59,
  60, 61, 62,
  63, 64, 65,
  66, 67, 68,
  69, 70, 71,
  72, 73, 74,
  75, 76, 77,
  78, 79, 80,
  81, 82, 83,
  84, 85, 86,
  87, 88, 89,
  90, 91, 92,
  92, 93, 94,
  94, 95, 96,
  96, 97, 98,
  98, 99, 100,
  100, 101, 102,
  102, 103, 104,
  104, 105, 106,
  106, 107, 108,
  108, 109, 110,
  110, 111, 112,
  112, 113, 114,
  114, 115, 116,
  116, 117, 118,
  118, 119, 120,
  120, 121, 90,
  90, 92, 94,
  94, 96, 98,
  98, 100, 102,
  102, 104, 106,
  106, 108, 110,
  110, 112, 114,
  114, 116, 118,
  118, 120, 90,
  90, 94, 98,
  98, 102, 106,
  106, 110, 114,
  114, 118, 90,
  90, 98, 106,
  106, 114, 90,
  122, 123, 124,
  125, 126, 127,
}; // end coneTriangles




#endif // __DATA_H
